* init.el sources the file for emacs configration
  
* Evil mode
** Use evil mode for vim keybindings in emacs
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :config
         (require 'evil)
         (evil-mode 1))
   #+END_SRC
** Enable line numbers mode, easier to jump to lines
   #+BEGIN_SRC emacs-lisp
;   (global-display-line-numbers-mode)
   #+END_SRC
* Emacs
** All the configrations regarding the default behaviour of emacs are changed here
** Disable scroll bar, tool bar and menu bar
    #+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    #+END_SRC
** Do not make bakup files
    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
    #+END_SRC
** Use spaces insted of filthy tabs
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
      (setq-default tab-width 4)
      (setq-default c-basic-offset 4)

    #+END_SRC
** Do not show startup screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC
** Highlight the current line   
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode 0)
   #+END_SRC
** electricmode (*noremap in vim)
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
                                 (?\( . ?\))
                                 (?\[ . ?\])
                                 (?\" . ?\")
                                 (?\{ . ?\})))
     (electric-pair-mode t)
   #+END_SRC
* ORG mode 
** Org bullets, looks better than the "*"
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
       :ensure t
        :config
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
    #+END_SRC
* IDO mode
** Faster completion, findings
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (use-package ido-completing-read+
       :ensure t
       :config
     (ido-ubiquitous-mode 1))
   #+END_SRC
** Ido vertical mode
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :config
     (require 'ido-vertical-mode)
     (ido-vertical-mode 1)
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
     (setq ido-vertical-show-count t))
   #+END_SRC
** Map keys for evil to use ido mode
*** Find file (replace ":e ")
    #+BEGIN_SRC emacs-lisp
    (define-key evil-ex-map "e " 'ido-find-file)
    #+END_SRC
*** Switch buffer (replace ": b ")
    #+BEGIN_SRC emacs-lisp
    (define-key evil-ex-map "b " 'ido-switch-buffer)
    #+END_SRC

* Beacon
** Highlight cursor line after switching
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
        :ensure t
        :config
        (beacon-mode 1))
    #+END_SRC
* Journaling
** Load diary funtion
   #+BEGIN_SRC emacs-lisp
     (defun load-diary()
       (interactive)
       (find-file "~/Documents/.Diary.org"))

     (global-set-key (kbd "C-c d") 'load-diary)
   #+END_SRC
* Avy mode
** Define keys for avy mode
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :config
     (global-set-key (kbd "M-s") 'evil-avy-goto-char)
     (global-set-key (kbd "M-t") 'evil-avy-goto-char-timer))
   #+END_SRC
* Golden Ratio
#+BEGIN_SRC emacs-lisp
;;  (use-package golden-ratio
;;    :ensure t
;;    :config
;;    (require 'golden-ratio)
;;    (golden-ratio-mode 1)
;;    (setq golden-ratio-extra-commands
;;        (append golden-ratio-extra-commands
;;                '(evil-window-left
;;                  evil-window-right
;;                  evil-window-up
;;                  evil-window-down
;;                  select-window-1
;;                  select-window-2
;;                  select-window-3
;;                  select-window-4
;;                  select-window-5))))

#+END_SRC
* Automcompelete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+END_SRC
* Personal
#+BEGIN_SRC emacs-lisp
  (require 'subr-x)
  (defun insert-fun-doc()
    (interactive)
    (setq fun-name (thing-at-point 'word 'no-properties)) ; Save the function name
    (setq fun (thing-at-point 'line 'no-properties))      ; Save the function defination line
    (save-excursion                                       ; Revert to the cursor location after insert
      (forward-line -1)                                   ; Go 2 lines up
      (end-of-line)                                       ; Go to end of line
      (open-line 1)                                       ; Insert new line below
      (insert (format
  "/*
  %s
  Description:

  Arguments: 
    %s
  ,*/" fun-name (get-arg-list fun)))
      (forward-line 1)                                    ; Move one line down
      (kill-whole-line)                                   ; Delete the extra line
    )
  )

  (defun format-arg-list(arg-line)
    ; Recursively split at "," and add to the list arg-list
    (let ((format-arg-str (lambda (arg-string)
                            (when arg-string
                              (when (string-match "," arg-string)
                                (funcall format-arg-str (substring arg-string (+ 1 (string-match "," arg-string)) nil)))
                              (unless (string= "" arg-string)
                                (push (string-trim-left
                                       (substring arg-string 0 (if (string-match "," arg-string) (string-match "," arg-string) nil)))
                                      arg-list)))))
          (arg-list '()))
    (funcall format-arg-str arg-line)))

  (defun get-arg-list(fun-line)
    ; save the splitted argument list
    (let ((arg-list (format-arg-list (substring fun-line
                                                (+ (string-match "(" fun-line) 1)
                                                (string-match ")" fun-line)))))
      ; format the argument list
      (if arg-list
          (mapconcat 'identity arg-list "\n  ")
        "None")))

  (global-set-key (kbd "C-c f") 'insert-fun-doc)

#+END_SRC
